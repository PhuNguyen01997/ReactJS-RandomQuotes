{"version":3,"sources":["App.js","actions/index.js","contants/actionsType.js","serviceWorker.js","reducers/changeQuote.js","reducers/index.js","index.js"],"names":["App","changeQuote","props","onChangeColor","document","querySelectorAll","forEach","elem","classList","add","setTimeout","onChangeQuote","remove","this","color","quote","author","className","style","backgroundColor","marginRight","aria-hidden","id","href","onClick","React","Component","connect","state","dispatch","type","Boolean","window","location","hostname","match","quotes","str","initialIndex","getRandomRange","length","currentQuotes","oldIndex","initialState","getRandomColor","i","Math","floor","random","min","max","reducer","action","randomColor","Object","assign","check","index","tempObj","splice","sumReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.96c8da5b.chunk.js","sourcesContent":["import React from 'react';\n\nimport { connect } from \"react-redux\"\nimport * as action from \"./actions/index\";\n\nclass App extends React.Component {\n  changeQuote = () => {\n    this.props.onChangeColor();\n    // changQuote with animation\n    document.querySelectorAll(\".quote\").forEach(elem => elem.classList.add(\"quote--getOut\"));\n    setTimeout( () => {\n      this.props.onChangeQuote();\n      document.querySelectorAll(\".quote\").forEach(elem => elem.classList.remove(\"quote--getOut\"));\n      document.querySelectorAll(\".quote\").forEach(elem => elem.classList.add(\"quote--getIn\"));\n      setTimeout( () => {\n        document.querySelectorAll(\".quote\").forEach(elem => elem.classList.remove(\"quote--getIn\"));\n      },800);\n    },800);\n  }\n  render() {\n    const { color,quote,author } = this.props;\n    return (\n      <div className=\"quoteBox\" >\n        <div className=\"coverOpacity\" style={{backgroundColor: color}}></div>\n        <div className=\"container\">\n          <p style={{color: color}} className=\"quote\"><i style={{marginRight: \"10px\"}} className=\"fa fa-quote-left\" aria-hidden=\"true\"></i>\n            {quote}\n          </p>\n          <p id=\"author\" className=\"quote\" style={{color: color}}>-- {author}</p>\n          <div className=\"footer\">\n            <a href=\"#/\" style={{color: color}}><i className=\"fa fa-twitter-square\" aria-hidden=\"true\"></i> </a>\n            <a href=\"#/\" style={{color: color}}><i className=\"fa fa-tumblr-square\" aria-hidden=\"true\"></i> </a>\n            <a href=\"#/\" style={{color: color}}><i className=\"fa fa-facebook-square\" aria-hidden=\"true\"></i> </a>\n            <button className=\"btn\" onClick={this.changeQuote} style={{backgroundColor: color}}>New quote</button>\n          </div>\n        </div>\n        <p id=\"email\"><a href=\"#/\">by phunguyen01997@gmail.com</a></p>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    color: state.changeQuote.color,\n    quote: state.changeQuote.quote,\n    author: state.changeQuote.author,\n  }\n};\nconst mapDispatchToProps = (dispatch,props) => {\n  return {\n    onChangeColor: () => {\n      dispatch(action.changeColor());\n    },\n    onChangeQuote: () => {\n      dispatch(action.changeQuote());\n    }\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps) (App);\n","import * as type from \"../contants/actionsType\"\r\n\r\nexport const changeColor = () => {\r\n    return{\r\n        type: type.CHANGE_COLOR,\r\n    }\r\n}\r\nexport const changeQuote = () => {\r\n    return{\r\n        type: type.CHANGE_QUOTE,\r\n    }\r\n}","export const CHANGE_COLOR = \"CHANGE_COLOR\";\r\nexport const CHANGE_QUOTE = \"CHANGE_QUOTE\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as types from \"../contants/actionsType\";\r\n\r\nvar quotes = [\r\n    {   str: \"Don’t worry about many things at once. Start small, think big\",\r\n        author: `Steve Jobs`},\r\n    {   str: \"It’s fine to celebrate success but it is more important to heed the lessons of failure\",\r\n        author: `Bill Gates`},\r\n    {   str: \"You can’t let your failures define you. You have to let your failures teach you\",\r\n        author: `Barack Obama`},\r\n    {   str: \"Life is a story that makes yours the best seller\",\r\n        author: \"Reback\"},\r\n    {   str: \"Life is like riding a bicycle. To keep your balance, you must keep moving\",\r\n        author: \"Albert Einstein\"},\r\n    {   str: \"It does not do to dwell on dreams and forget to live\",\r\n        author: `J.K. Rowling, Harry Potter and the Sorcerer’s Stone`},\r\n    {   str: \"Today is hard, tomorrow will be worse but the day after tomorrow will be sunshine\",\r\n        author: `Jack Ma`},\r\n    {   str: \"Everything you can imagine is real\",\r\n        author: `Pablo Picasso`},\r\n    {   str: \"Getting ahead in a difficult profession requires avid faith in yourself. That is why some people with mediocre talent, but with great inner drive, go so much further than people with vastly superior talent\",\r\n        author: `Sophia Loren`},\r\n    {   str: \"Love yourself unconditionally, just as you love those closest to you despite their faults.\",\r\n        author: `Les Brown`},\r\n    {   str: \"Nothing in life is to be feared, it’s to be understood. Now is the time to understand more, so that we may fear less\",\r\n        author: `Marie Curie`},\r\n    {   str: \"When life gives you a hundred reasons to cry, show life that you have a thousand reasons to smile\",\r\n        author: `Stephenie Meyer`},\r\n    {   str: \" People have different reasons for the way they live their life. You cannot put everyone’s reasons in the same box\",\r\n        author: `Kevin Spacey`},\r\n    {   str: \"The way to get started is to quit talking and begin doing\",\r\n        author: `Walt Disney`},\r\n];\r\nconst initialIndex = getRandomRange(0,quotes.length - 1);\r\nvar currentQuotes = [...quotes];\r\nvar oldIndex = initialIndex;\r\nvar initialState = {\r\n    color: getRandomColor(),\r\n    quote: quotes[initialIndex].str,\r\n    author: quotes[initialIndex].author,\r\n};\r\n\r\nvar reducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case (types.CHANGE_COLOR): {\r\n            const randomColor = getRandomColor();\r\n            return Object.assign({},state,{color: randomColor});\r\n        }\r\n        case (types.CHANGE_QUOTE): {\r\n            let tempObj = Object.assign({},state);\r\n            let index = getRandomRange(0,currentQuotes.length - 1 === 0 ? 1 : currentQuotes.length - 1);\r\n            function check(){\r\n                // eslint-disable-next-line\r\n                if(oldIndex !== index || oldIndex === 0 && index === 0){\r\n                    oldIndex = index;\r\n                    tempObj.quote = currentQuotes[index].str;\r\n                    tempObj.author = currentQuotes[index].author;\r\n                    \r\n                    currentQuotes.splice(index,1);\r\n                    if(currentQuotes.length === 0){\r\n                        currentQuotes = [...quotes];\r\n                    }\r\n                }\r\n                else{\r\n                    index = getRandomRange(0,currentQuotes.length - 1 === 0 ? 1 : currentQuotes.length - 1);\r\n                    check();\r\n                }\r\n                return tempObj;\r\n            }\r\n            return check();\r\n        }\r\n        default: return state;\r\n        \r\n    }\r\n}\r\n\r\nfunction getRandomColor() {\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n}\r\n\r\nfunction getRandomRange(min,max){\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport default reducer;","import { combineReducers } from \"redux\";\r\nimport changeQuote from \"./changeQuote\";\r\n\r\nconst sumReducer = combineReducers({\r\n    changeQuote: changeQuote,\r\n});\r\n\r\nexport default sumReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport sumReducer from \"./reducers/index\";\n\nconst store = createStore(sumReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}